#include "Eigen/Core"
#include "Eigen/Eigenvalues"
#include <fstream>
#include <ostream>
#include <iostream>
#include <sstream>
#include <unistd.h>

int main() {
  using namespace std;
  string dataDir = "./dataset/";
  const string filename = "AvgRainfall.csv";
  const string filepath = dataDir + filename;

  // Matrix Initialisation
  Eigen::Matrix<float, 2, 64> dataMatrix;

  // File Handling
  cout << "Reading file input..." << endl;
  ifstream ifs(filepath);
  for (int i = 0; i < 64; i++) {
    for (int v = 0; v < 2; v++) {
      float val;
      ifs >> val >> ws;
      dataMatrix(v, i) = val;
    }
  }

  // Mean Mapping
  cout << "Calculating mean matrix..." << endl;
  Eigen::Matrix<float, 2, 1> meanMatrix;
  meanMatrix = meanMatrix.Zero();
  for (int i = 0; i < 64; i++)
    for (int v = 0; v < 2; v++)
      meanMatrix(v, 0) = meanMatrix(v, 0) + dataMatrix(v, i);
  meanMatrix(0, 0) = meanMatrix(0, 0) / 64;
  meanMatrix(1, 0) = meanMatrix(1, 0) / 64;

  // Centre Mapping
  cout << "Calculating centred matrix..." << endl;
  Eigen::Matrix<float, 2, 64> centreMatrix;
  for (int i = 0; i < 64; i++)
    for (int v = 0; v < 2; v++)
      centreMatrix(v, i) = dataMatrix(v, i) - meanMatrix(v, 0);

  // Covalent Matrix Mapping and Total/Item Variance
  cout << "Calcualting covalent matrix..." << endl;
  float totalVariance(0);
  Eigen::Matrix2f covMatrix;
  covMatrix = covMatrix.Zero();
  for (int y = 0; y < 2; y++)
    for (int x = 0; x < 2; x++) {
      for (int n = 0; n < 64; n++)
        covMatrix(x, y) += centreMatrix(x, n) * centreMatrix(y, n);
      covMatrix(x, y) /= 63;
      totalVariance += covMatrix(x, y);
    }

  // Eigen Value Calculation
  cout << "Calculating eigen values and vectors..." << endl;
  Eigen::EigenSolver<Eigen::Matrix2f> eigenSolver;
  eigenSolver.compute(covMatrix);
  auto eigenVectors = eigenSolver.eigenvectors();
  auto eigenValues = eigenSolver.eigenvalues();

  // Proportion Explained
  cout << "Calculating proportion explained..." << endl;
  float itemVariance(0);
  itemVariance += covMatrix(0, 0);
  itemVariance += covMatrix(1, 1);
  float proportion = 100*itemVariance/totalVariance;

  // File Output
  cout << "Outputting to file..." << endl;
  ofstream ofs("Output.txt");
  // Question 1
  ofs << "Q1. Eigen Values: " << endl << eigenValues << endl << endl;
  // Question 2
  ofs << "Q2. Eigen Vectors: " << endl << eigenVectors << endl << endl;
  // Question 3
  ofs << "Q3. Covariance Matrix: " << endl << covMatrix << endl << endl;
  // Question 4
  ofs << "Q4. Total Variance: " << endl << totalVariance << endl << endl;
  // Question 5
  ofs << "Q5. Percentage Proportion Explained: " << endl << proportion << endl << endl;
  
  return 0;
}
