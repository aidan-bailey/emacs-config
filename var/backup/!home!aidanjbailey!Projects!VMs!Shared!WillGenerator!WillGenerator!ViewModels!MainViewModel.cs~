using System;
using System.CodeDom;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using WillGenerator.Helpers;
using WillGenerator.Managers;
using WillGenerator.Models;

namespace WillGenerator.ViewModels
{
    public class MainViewModel : ViewModelBase
    {
        private DBManager _dbManager;
        private ICommand _submitClickCommand;

        public MainViewModel(DBManager dbManager)
        {
            _dbManager = dbManager;
        }

        public ICommand SubmitClickCommand
        {
            get
            {
                return _submitClickCommand ?? (_submitClickCommand = new CommandHandler(() => SubmitButtonOnClick(), () => CanExecute));
            }
        }

        private void SubmitButtonOnClick()
        {
            Section1Data section1Data = new Section1Data
            {
                Client1 = new PersonData { Name = MainWindow.Section1VM.ClientName, Id = MainWindow.Section1VM.ClientId },
                Guardian1 =
                    new PersonData { Name = MainWindow.Section1VM.Guardian1Name, Id = MainWindow.Section1VM.Guardian1Id },
                Guardian2 =
                    new PersonData { Name = MainWindow.Section1VM.Guardian2Name, Id = MainWindow.Section1VM.Guardian2Id },
                Trustee1 =
                    new PersonData { Name = MainWindow.Section1VM.Trustee1Name, Id = MainWindow.Section1VM.Trustee1Id },
                Trustee2 =
                    new PersonData { Name = MainWindow.Section1VM.Trustee2Name, Id = MainWindow.Section1VM.Trustee2Id },
                Executor = new PersonData { Name = MainWindow.Section1VM.Executor, Id = MainWindow.Section1VM.ExecutorId },
            };

            TagHelper tagHelper = new TagHelper(section1Data);
            ClausePriorityQueue[] clauses = new ClausePriorityQueue[3]
            {
                new ClausePriorityQueue(1),
                new ClausePriorityQueue(2),
                new ClausePriorityQueue(3), 
            };
            for (int sectionIndex = 0; sectionIndex < 3; sectionIndex++)
            {
                foreach (RadioButton tb in ControlsHelper.FindVisualChildren<RadioButton>(MainWindow.sections[sectionIndex]))
                {
                    if (tb.IsChecked != null && (bool) tb.IsChecked && tb.Tag != null) 
                    {
                        string tag = tb.Tag.ToString();
                        List<string> list = new List<string>(tag.Split('.'));
                        if (list.Contains("?"))
                            list[list.IndexOf("?")] = MainWindow.Section2VM.ContentSwitch.ToString();
                        int headerId = int.Parse(list[0]);
                        int clauseNo = int.Parse(list[1]);
                        string dbResponse = _dbManager.GetClause(int.Parse(list[0]), int.Parse(list[1]));
                        string message = tagHelper.InjectTags(dbResponse);
                        clauses[sectionIndex].Add(headerId, clauseNo, message);
                    }
                }
                foreach (CheckBox cb in ControlsHelper.FindVisualChildren<CheckBox>(MainWindow.sections[sectionIndex]))
                {
                    if (cb.IsChecked != null && (bool)cb.IsChecked && cb.Tag != null)
                    {
                        string tag = cb.Tag.ToString();
                        List<string> list = new List<string>(tag.Split('.'));
                        if (list.Contains("?"))
                            list[list.IndexOf("?")] = MainWindow.Section2VM.ContentSwitch.ToString();
                        int headerId = int.Parse(list[0]);
                        int clauseNo = int.Parse(list[1]);
                        string dbResponse = _dbManager.GetClause(int.Parse(list[0]), int.Parse(list[1]));
                        string message = tagHelper.InjectTags(dbResponse);
                        clauses[sectionIndex].Add(headerId, clauseNo, message);
                    }
                }

            }
            return;
        }

        

        public bool CanExecute
        {
            get
            {
                // check if executing is allowed, i.e., validate, check if a process is running, etc. 
                return true;
            }
        }
    }
}
