#include "KMeanHelper.hpp"
#include <algorithm>
#include <cmath>
#include <float.h>
#include <iostream>
#include <math.h>
#include <memory>
#include <string>
#include <utility>

using namespace BLYAID001;
using namespace std;

KMeanHelper::KMeanHelper(int clusterCount, int binSize)
    : _clusterCount(clusterCount), _binSize(binSize){};

KMeanHelper::~KMeanHelper(void) { _features.clear(); }

int KMeanHelper::LloydsAlgorithm(void) {
  cout << "KMeanHelper::LloydsAlgorithm() called" << endl;
  // Randomizing Data
  std::random_shuffle(_features.begin(), _features.end());
  int const bucketCount = GetBucketCount();

  // Initializing Clusters
  cout << "Starting cluster initialization..." << endl;
  vector<vector<int>> clusterArray;
  for (int i = 0; i < _clusterCount; i++) {
    vector<int> temp(bucketCount);
    for (int j = 0; j < bucketCount; j++)
      temp[j] = int(_features[i].Histogram[j]);
    clusterArray.push_back(temp);
  }
  cout << "Cluster initialization complete" << endl;

  // Initiate Algorithm
  int iterationCounter = 0;
  while (true) {
    cout << "++++++++++++++++++++++++++++++++++++++++++++++" << endl;
    iterationCounter++;
    cout << "Iteration count: " << iterationCounter << endl;
    bool idle = true;
    cout << "Assigning KNodes" << endl;
    for (auto &knode : _features) {
      int newClusterNo(-1);
      float closestDistance = DBL_MAX;
      for (int i = 0; i < _clusterCount; i++) {
        float distance = calculateDistance(clusterArray[i], knode.Histogram);
        if (distance < closestDistance) {
          closestDistance = distance;
          newClusterNo = i;
        }
      }
      if (newClusterNo != -1 && newClusterNo != knode.ClusterNo) {
        idle = false;
        knode.ClusterNo = newClusterNo;
      }
    }
    if (idle)
      break;

    cout << "KNodes Assigned" << endl;
    cout << "Recalculating centroids..." << endl;

    // Calculate new centroids
    for (int i = 0; i < _clusterCount; i++) {
      int count(0);
      vector<int> sum(bucketCount);
      for (auto &knode : _features)
        if (knode.ClusterNo == i) {
          count++;
          for (int j = 0; j < bucketCount; j++)
            sum[j] += knode.Histogram[j];
        }
      for (int j = 0; j < bucketCount; j++)
        if (count != 0)
          clusterArray[i][j] = sum[j] / count;
        else
          clusterArray[i][j] = 0;
    }
  }
  cout << "All knodes idle" << endl;
  cout << "++++++++++++++++++++++++++++++++++++++++++++++" << endl;
  cout << "KMeanHelper::LloydsAlgorithm() complete" << endl;

  for (int i = 0; i < _clusterCount; i++) {
    cout << "Cluster " << i + 1 << ":: ";
    for (int j = 0; j < _features.size(); j++)
      if (_features[j].ClusterNo == i)
        cout << _features[j].ImageName << "; ";
    cout << endl;
  }

  clusterArray.clear();
  return 0;
}

float KMeanHelper::calculateDistance(vector<int> centroid,
                                     vector<int> &feature) {
  int bucketCount = GetBucketCount();
  float distance(0);
  for (int i = 0; i < bucketCount; i++)
    distance += pow(centroid[0] - feature[0], 2);
  return sqrt(distance);
}

int KMeanHelper::AddImage(PPMHelper &ppmHelper) {
  cout << "KMeanHelper::AddImage() called" << endl;
  vector<int> histogram;
  generateHistogram(histogram, ppmHelper);
  struct KNode node;
  node.ClusterNo = -1;
  node.ImageName = ppmHelper.GetFilename();
  node.Histogram = histogram;
  _features.push_back(node);
  cout << "KMeanHelper::AddImage() complete" << endl;
  return 0;
}

const int KMeanHelper::GetBucketCount() { return ceil(256 / _binSize); }

void KMeanHelper::generateHistogram(vector<int> &histogram,
                                    PPMHelper &ppmHelper) {
  cout << "KMeanHelper::generateHistogram() called" << endl;
  int bucketCount = GetBucketCount();
  for (int i = 0; i < bucketCount; i++)
    histogram.push_back(0);
  int dataSize = ppmHelper.GetColCount() * ppmHelper.GetColCount() * 3;
  for (int i = 0; i < dataSize; i++) {
    int val = (int)(ppmHelper.GetBlockData()[i]);
    histogram[int(floor(val / _binSize))] += 1;
  }
  cout << "KMeanHelper::generateHistogram() complete" << endl;
}
